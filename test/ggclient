#! /usr/bin/env python

import sys
import select
import argparse
import socket
import ssl

class Client:
	"""SSL enabled metwork client.
	"""
	def __init__( self, host, port ):
		self._buffer = ""
		self._host = host
		self._port = port
		s = socket.create_connection( ( self._host, self._port ) )
		self._socket = ssl.wrap_socket( s )
		self._socket.setblocking( False )
	
	def __deinit__( self ):
		self._socket.shutdown()
		self._socket.close()

	def send( self, data ):
		self._socket.sendall( data )
	
	def read_line( self, timeout = 1.0 ):
		line = ""
		while True:
			nl = self._buffer.find( "\n" )
			if nl >= 0:
				line, sep, self._buffer = self._buffer.partition( "\n" )
				break
			else:
				r, w, e = select.select( [self._socket], [], [], timeout )
				if ( self._socket in r ):
					data = ""
					try:
						data = self._socket.recv( 1024 )
					except ssl.SSLError as e:
						if e.errno != ssl.SSL_ERROR_WANT_READ:
							raise
						continue
					if not data:
						break
					dataLeft = self._socket.pending()
					while dataLeft:
						data += self._socket.recv( dataLeft )
						dataLeft = self._socket.pending()
					self._buffer += data
				else:
					break
		return ( line )

def dump( client, timeout ):
	while True:
		line = client.read_line( timeout )
		if len( line ) == 0:
			break
		print line


def main():
	parser = argparse.ArgumentParser( description = "Execute script on GameGround server." )
	parser.add_argument( "-H", "--host", metavar="host", type = str, required = True, help = "Addess of GameGround server host." )
	parser.add_argument( "-P", "--port", metavar="num", type = int, default = 7777, help = "Port number where GameGround server is running." )
	parser.add_argument( "-s", "--script", metavar="path", type = str, required = True, help = "Execute given script on GameGround server." )
	args = parser.parse_args()
	client = Client( args.host, args.port )
	try:
		script = open( args.script, 'rbU' )
	except IOError as e:
		print "I/O error({0}): {1}: {2}".format( e.errno, e.strerror, args.script )
		return ( 1 )

	for line in script:
		client.send( line )
		dump( client, 0.1 )

if __name__ == "__main__":
	sys.exit( main() )

